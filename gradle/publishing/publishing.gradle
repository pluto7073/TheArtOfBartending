//file:noinspection GroovyAssignabilityCheck
import java.nio.file.Files

ext {
    changelog_text = getChangelog(file("KNOWN_BUGS.md"), file("CHANGELOG.md"))
}

tasks.register("publishMod") {
    group = "publishing"
    dependsOn(tasks.modrinth)
    dependsOn(tasks.githubRelease)
    dependsOn(tasks.curseforge)
}

static String getChangelog(File bugs, File changelog) {
    String knownBugs = Files.readString(bugs.toPath())
    String changelogBase = Files.readString(changelog.toPath())
    String log = !knownBugs.trim().isEmpty() ? "## Known Bugs\n" + knownBugs + "\n\n" : ""
    log += changelogBase.split("---")[0].trim()
    return log
}

tasks.githubRelease.dependsOn(tasks.remapJar)

githubRelease {
    token = System.getenv("GH_TOKEN") ?: ""
    targetCommitish = "1.20"
    body = changelog_text
    releaseAssets = [file("build/libs/${archives_base_name}-${version}.jar") , file("build/libs/${archives_base_name}-${version}-sources.jar")]
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "bartending"
    versionType = project.release_type
    uploadFile = file("build/libs/${remapJar.archiveBaseName.get()}-${version}.jar")
    additionalFiles = [ file("build/libs/${remapJar.archiveBaseName.get()}-${version}-sources.jar") ]
    gameVersions = project.minecraft_dependency.split(',').toList()
    dependencies {
        required.project "fabric-api"
        required.project "pdapi"
        optional.project "modmenu"
        optional.project "cloth-config"
    }
    loaders = [ "fabric" ]
    changelog = changelog_text
}

curseforge {
    apiKey = System.getenv("CURSE_TOKEN") ?: "unset"
    project {
        id = "1179007"
        changelog = changelog_text
        releaseType = 'release'
        for (final def version in project.minecraft_dependency.split(',')) {
            addGameVersion(version)
        }
        addGameVersion("Fabric")
        relations {
            requiredDependency("fabric-api")
            requiredDependency("pdapi")
        }
        mainArtifact(file("build/libs/${remapJar.archiveBaseName.get()}-${version}.jar")) {
            displayName = version
        }
        afterEvaluate {
            uploadTask.dependsOn(tasks.remapJar)
        }
    }
    curseGradleOptions.forgeGradleIntegration = false
}